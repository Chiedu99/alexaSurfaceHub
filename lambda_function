import boto3

# Input your own information into lines below.
access_key = "<<ACCESS KEY>>"
access_secret = "<<SECRET KEY>>"
region ="<<REGION>>"
queue_url = "<<QUEUE URL>>"

def build_speechlet_response(title, output, reprompt_text, should_end_session):
    return {
        'outputSpeech': {
            'type': 'PlainText',
            'text': output
        },
        'card': {
            'type': 'Simple',
            'title': "SessionSpeechlet - " + title,
            'content': "SessionSpeechlet - " + output
        },
        'reprompt': {
            'outputSpeech': {
                'type': 'PlainText',
                'text': reprompt_text
            }
        },
        'shouldEndSession': should_end_session
    }

def build_response(session_attributes, speechlet_response):
    return {
        'version': '1.0',
        'sessionAttributes': session_attributes,
        'response': speechlet_response
    }

def post_message(client, message_body, url):
    response = client.send_message(QueueUrl = url, MessageBody= message_body)
    
def lambda_handler(event, context):
    client = boto3.client('sqs', aws_access_key_id = access_key, aws_secret_access_key = access_secret, region_name = region)
    intent_name = event['request']['intent']['name']
    
    # Use whatever intent name defined in Alexa skill.
    # Message in single quotes is passed on to SQS.
    if intent_name == "sourceDP":
        post_message(client, 'DP', queue_url)
        message = "DP"
    
    elif intent_name == "sourceHDMI":
        post_message(client, 'HDMI', queue_url)
        message = "HDMI"
    
    elif intent_name == "sourceVGA":
        post_message(client, 'VGA', queue_url)
        message = "VGA"
    
    elif intent_name == "sourcePC":
        post_message(client, 'PC', queue_url)
        message = "PC"
    
    elif intent_name == "powerOn":
        post_message(client, 'Now powering on the hub', queue_url)
        message = "Now powering on the hub"
    
    elif intent_name == "powerOff":
        post_message(client, 'Now turning off the hub', queue_url)
        message = "Now powering off the hub"
    
    elif intent_name == "brightnessUp":
        post_message(client, 'Turning up brightness', queue_url)
        message = "Turning up brightness"
    
    elif intent_name == "brightnessDown":
        post_message(client, 'Turning down brightness', queue_url)
        message = "Turning down brightness"

    else:
        message = "Unknown"
        
    speechlet = build_speechlet_response("Surface Hub Status", message, "", "true")
    return build_response({}, speechlet)
